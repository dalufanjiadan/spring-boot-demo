server:
    port: 8000

spring:
    profiles:
        active: dev
    datasource:
        username: root
        password: 123456
        url: jdbc:mysql://localhost:3306/test1

    redis:
        host: 127.0.0.1
        # Redis 服务器连接端口
        port: 6379
        # Redis 数据库索引（默认为 0）
        database: 0
        # Redis 服务器连接密码（默认为空）
        password:
        jedis:
            pool:
                #连接池最大连接数（使用负值表示没有限制）
                max-active: 8
                # 连接池最大阻塞等待时间（使用负值表示没有限制）
                max-wait: -1
                # 连接池中的最大空闲连接
                max-idle: 8
                # 连接池中的最小空闲连接
                min-idle: 0
                # 连接超时时间（毫秒）
                timeout: 5000

    ## MULTIPART (MultipartProperties)
    # Enable multipart uploads
    servlet:
        multipart:
            enabled: true
            # Threshold after which files are written to disk.
            file-size-threshold: 2KB
            # Max file size.
            max-file-size: 200MB
            # Max Request Size
    #         max-request-size: 215MB

    security:
        oauth2:
            client:
                registration:
                    google:
                        clientId: 5014057553-8gm9um6vnli3cle5rgigcdjpdrid14m9.apps.googleusercontent.com
                        clientSecret: tWZKVLxaD_ARWsriiiUFYoIk
                        redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
                        scope:
                            - email
                            - profile
                    facebook:
                        clientId: 121189305185277
                        clientSecret: 42ffe5aa7379e8326387e0fe16f34132
                        redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
                        scope:
                            - email
                            - public_profile
                    github:
                        clientId: d3e47fc2ddd966fa4352
                        clientSecret: 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
                        redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
                        scope:
                            - user:email
                            - read:user
                provider:
                    facebook:
                        authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
                        tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
                        userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

mybatis:
    mapperLocations: classpath:mapper/**/*.xml

# PageHelper 分页插件配置
pagehelper:
    helperDialect: mysql
    reasonable: true
    supportMethodsArguments: true
    params: count=countSql

logging:
    level:
        com.justdoit.springboottest.mapper.UserMapper: debug

kafka:
    bootstrapAddress: localhost:9092
    topic:
        test: test
        user: user
    consumer:
        groupId:
            test: test
            user: user

enable:
    maintain: false
    security: false
    redis: false
    kafka: false
    webSocket: false

app:
    auth:
        tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
        tokenExpirationMsec: 864000000
    oauth2:
        # After successfully authenticating with the OAuth2 Provider,
        # we'll be generating an auth token for the user and sending the token to the
        # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
        # We're not using cookies because they won't work well in mobile clients.
        authorizedRedirectUris:
            - http://localhost:8081
            - myandroidapp://oauth2/redirect
            - myiosapp://oauth2/redirect
